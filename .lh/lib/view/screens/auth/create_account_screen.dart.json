{
    "sourceFile": "lib/view/screens/auth/create_account_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1667404689892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1667404689892,
            "name": "Commit-0",
            "content": "import 'package:ainsighter/data/model/response/signup_model.dart';\nimport 'package:ainsighter/helper/route_helper.dart';\nimport 'package:ainsighter/localization/language_constrants.dart';\nimport 'package:ainsighter/provider/address_provider.dart';\nimport 'package:ainsighter/provider/auth_provider.dart';\nimport 'package:ainsighter/provider/profile_provider.dart';\nimport 'package:ainsighter/utill/color_resources.dart';\nimport 'package:ainsighter/utill/config.dart';\nimport 'package:ainsighter/utill/dimensions.dart';\nimport 'package:ainsighter/utill/styles.dart';\nimport 'package:ainsighter/view/base/custom_app_bar.dart';\nimport 'package:ainsighter/view/base/custom_navigation_bar.dart';\nimport 'package:ainsighter/view/base/custom_secondary_button.dart';\nimport 'package:ainsighter/view/base/custom_snackbar.dart';\nimport 'package:ainsighter/view/base/custom_text_field.dart';\nimport 'package:flutter/material.dart';\nimport 'package:mask_text_input_formatter/mask_text_input_formatter.dart';\nimport 'package:provider/provider.dart';\n\nclass CreateAccountScreen extends StatefulWidget {\n  @override\n  _CreateAccountScreenState createState() => _CreateAccountScreenState();\n}\n\nclass _CreateAccountScreenState extends State<CreateAccountScreen> {\n  final FocusNode _nameFocus = FocusNode();\n  final FocusNode _emailFocus = FocusNode();\n  final FocusNode _numberFocus = FocusNode();\n  final FocusNode _passwordFocus = FocusNode();\n  final FocusNode _postcodeFocus = FocusNode();\n\n  final TextEditingController _nameController = TextEditingController();\n  final TextEditingController _emailController = TextEditingController();\n  final TextEditingController _numberController = TextEditingController();\n  final TextEditingController _passwordController = TextEditingController();\n\n  var postcodeMask =\n      new MaskTextInputFormatter(mask: '####', filter: {\"#\": RegExp(r'[0-9]')});\n\n  @override\n  void initState() {\n    Future.microtask(() {\n      Provider.of<AddressProvider>(context, listen: false).getCityList(context);\n    });\n\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return SafeArea(\n      child: Scaffold(\n          body: Consumer<AuthProvider>(\n              builder: (context, authProvider, child) => CustomScrollView(\n                    slivers: [\n                      SliverPersistentHeader(\n                        pinned: true,\n                        delegate: const MyHeaderDelegate(),\n                      ),\n                      SliverFillRemaining(\n                        child: Padding(\n                          padding: EdgeInsets.symmetric(\n                              vertical: 20, horizontal: 20),\n                          child: Column(\n                            crossAxisAlignment: CrossAxisAlignment.center,\n                            mainAxisAlignment: MainAxisAlignment.center,\n                            children: [\n                              CustomTextField(\n                                hintText: '',\n                                labelText: 'Ad Soyad',\n                                isShowBorder: true,\n                                isShowPrefixIcon: true,\n                                prefixIconUrl: Icons.person,\n                                controller: _nameController,\n                                focusNode: _nameFocus,\n                                nextFocus: _emailFocus,\n                                inputType: TextInputType.name,\n                                capitalization: TextCapitalization.words,\n                              ),\n                              SizedBox(height: Dimensions.PADDING_SIZE_SMALL),\n                              CustomTextField(\n                                labelText: 'E-posta',\n                                hintText: getTranslated('', context),\n                                isShowBorder: true,\n                                isShowPrefixIcon: true,\n                                prefixIconUrl: Icons.mail_outline,\n                                focusNode: _emailFocus,\n                                nextFocus: _numberFocus,\n                                inputType: TextInputType.emailAddress,\n                                controller: _emailController,\n                              ),\n                              SizedBox(height: Dimensions.PADDING_SIZE_SMALL),\n                              CustomTextField(\n                                hintText: \"xxxx xxx xx xx\",\n                                labelText: 'Cep Telefonu',\n                                isShowBorder: true,\n                                isShowPrefixIcon: true,\n                                prefixIconUrl: Icons.phone,\n                                controller: _numberController,\n                                focusNode: _numberFocus,\n                                nextFocus: _passwordFocus,\n                                inputType: TextInputType.phone,\n                              ),\n                              SizedBox(height: Dimensions.PADDING_SIZE_SMALL),\n                              CustomTextField(\n                                hintText:\n                                    getTranslated('password_hint', context),\n                                labelText: 'Sifre',\n                                isShowBorder: true,\n                                isShowPrefixIcon: true,\n                                prefixIconUrl: Icons.lock_open_outlined,\n                                isPassword: true,\n                                controller: _passwordController,\n                                focusNode: _passwordFocus,\n                                nextFocus: _postcodeFocus,\n                                isShowSuffixIcon: true,\n                              ),\n                              SizedBox(height: Dimensions.PADDING_SIZE_SMALL),\n                              SizedBox(height: 20),\n                              CustomSecondaryButton(\n                                text: 'Kayıt Ol',\n                                color: Config.PrimaryColor,\n                                isLoading: authProvider.isLoading,\n                                onPress: () {\n                                  String _name = _nameController.text.trim();\n                                  String _email = _emailController.text.trim();\n                                  String _number =\n                                      _numberController.text.trim();\n                                  String _password =\n                                      _passwordController.text.trim();\n\n                                  if (_name.isEmpty) {\n                                    showCustomSnackBar(\n                                      'Lütfen adınızı girin',\n                                      context,\n                                    );\n                                  } else if (_email.isEmpty) {\n                                    showCustomSnackBar(\n                                        'E-posta adresi girin', context);\n                                  } else if (_number.isEmpty) {\n                                    showCustomSnackBar(\n                                        getTranslated(\n                                            'enter_phone_number', context),\n                                        context);\n                                  } else if (_password.length < 6) {\n                                    showCustomSnackBar(\n                                        getTranslated(\n                                            'password_should_be', context),\n                                        context);\n                                  } else {\n                                    SignUpModel signUpModel = SignUpModel(\n                                      name: _name,\n                                      email: _email,\n                                      password: _password,\n                                      phone: _number,\n                                    );\n\n                                    authProvider\n                                        .registration(signUpModel)\n                                        .then((status) async {\n                                      if (status.isSuccess) {\n                                        await Provider.of<ProfileProvider>(\n                                                context,\n                                                listen: false)\n                                            .getUserInfo(context);\n\n                                        Navigator.of(context)\n                                            .pushAndRemoveUntil(\n                                                MaterialPageRoute(\n                                                    builder: (_) =>\n                                                        CustomBottomNav()),\n                                                (route) => false);\n                                      } else {\n                                        showCustomSnackBar(\n                                            status.message, context);\n                                      }\n                                    });\n                                  }\n                                },\n                              ),\n                            ],\n                          ),\n                        ),\n                      ),\n                    ],\n                  ))),\n    );\n  }\n}\n\nclass MyHeaderDelegate extends SliverPersistentHeaderDelegate {\n  const MyHeaderDelegate();\n\n  @override\n  Widget build(\n    BuildContext context,\n    double shrinkOffset,\n    bool overlapsContent,\n  ) {\n    final progress = shrinkOffset / maxExtent;\n\n    return Material(\n      child: Stack(\n        fit: StackFit.expand,\n        children: [\n          AnimatedOpacity(\n            duration: const Duration(milliseconds: 150),\n            opacity: progress,\n            child: ColoredBox(\n              color: Theme.of(context).primaryColor,\n            ),\n          ),\n          AnimatedOpacity(\n            duration: const Duration(milliseconds: 150),\n            opacity: 1 - progress,\n            child: CustomPaint(\n              painter: CustomToolbarShape(\n                showBar: false,\n              ),\n            ),\n          ),\n          AnimatedContainer(\n            duration: const Duration(milliseconds: 100),\n            padding: EdgeInsets.lerp(\n              EdgeInsets.symmetric(horizontal: 16, vertical: 16),\n              EdgeInsets.only(bottom: 0),\n              progress,\n            ),\n            alignment: Alignment.lerp(\n              Alignment.bottomLeft,\n              Alignment.center,\n              progress,\n            ),\n            child: Text(\n              'Kayıt Ol',\n              style: TextStyle.lerp(\n                Theme.of(context)\n                    .textTheme\n                    .headline5\n                    .copyWith(color: Colors.white),\n                Theme.of(context)\n                    .textTheme\n                    .headline6\n                    .copyWith(color: Colors.white),\n                progress,\n              ),\n            ),\n          ),\n          AppBar(\n            backgroundColor: Colors.transparent,\n            toolbarHeight: 70,\n            leading: BackButton(),\n            elevation: 0,\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  double get maxExtent => 180;\n\n  @override\n  double get minExtent => 70;\n\n  @override\n  bool shouldRebuild(covariant SliverPersistentHeaderDelegate oldDelegate) =>\n      true;\n}\n"
        }
    ]
}