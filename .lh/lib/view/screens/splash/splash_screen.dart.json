{
    "sourceFile": "lib/view/screens/splash/splash_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1667569434817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1667569434817,
            "name": "Commit-0",
            "content": "import 'dart:async';\n\nimport 'package:ainsighter/helper/route_helper.dart';\nimport 'package:ainsighter/localization/language_constrants.dart';\nimport 'package:ainsighter/provider/auth_provider.dart';\nimport 'package:ainsighter/provider/category_provider.dart';\nimport 'package:ainsighter/provider/profile_provider.dart';\nimport 'package:ainsighter/provider/splash_provider.dart';\nimport 'package:ainsighter/utill/config.dart';\nimport 'package:ainsighter/view/base/custom_navigation_bar.dart';\nimport 'package:ainsighter/view/screens/auth/login_screen.dart';\nimport 'package:connectivity/connectivity.dart';\nimport 'package:flutter/material.dart';\nimport 'package:lottie/lottie.dart';\nimport 'package:provider/provider.dart';\nimport 'package:uni_links/uni_links.dart';\nimport 'package:flutter/services.dart' show PlatformException;\nimport 'package:ainsighter/di_container.dart' as di;\n\nclass SplashScreen extends StatefulWidget {\n  @override\n  _SplashScreenState createState() => _SplashScreenState();\n}\n\nclass _SplashScreenState extends State<SplashScreen> {\n  GlobalKey<ScaffoldMessengerState> _globalKey = GlobalKey();\n  StreamSubscription<ConnectivityResult> _onConnectivityChanged;\n\n  @override\n  void dispose() {\n    super.dispose();\n\n    _onConnectivityChanged.cancel();\n  }\n\n  Future<void> initUniLinks() async {\n    // Platform messages may fail, so we use a try/catch PlatformException.\n    try {\n      final initialLink = await getInitialLink();\n      print('GELEN LÄ°NK: ' + initialLink.toString());\n    } on PlatformException {\n      // Handle exception by warning the user their action did not succeed\n      // return?\n    }\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    initUniLinks();\n\n    bool _firstTime = true;\n    _onConnectivityChanged = Connectivity()\n        .onConnectivityChanged\n        .listen((ConnectivityResult result) {\n      if (!_firstTime) {\n        bool isNotConnected = result != ConnectivityResult.wifi &&\n            result != ConnectivityResult.mobile;\n        print('-----------------${isNotConnected ? 'Not' : 'Yes'}');\n        isNotConnected\n            ? SizedBox()\n            : ScaffoldMessenger.of(context).hideCurrentSnackBar();\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(\n          backgroundColor: isNotConnected ? Colors.red : Colors.green,\n          duration: Duration(seconds: isNotConnected ? 6000 : 3),\n          content: Text(\n            isNotConnected\n                ? getTranslated('no_connection', context)\n                : getTranslated('connected', context),\n            textAlign: TextAlign.center,\n          ),\n        ));\n        if (!isNotConnected) {\n          //_route();\n        }\n      }\n      _firstTime = false;\n    });\n\n    Provider.of<SplashProvider>(context, listen: false).initSharedData();\n\n    _route();\n  }\n\n  void _route() {\n    Provider.of<CategoryProvider>(context, listen: false)\n        .getCategoryList(context)\n        .then((bool isCategoriesSuccess) {\n      if (isCategoriesSuccess) {\n        Provider.of<SplashProvider>(context, listen: false)\n            .initConfig(context)\n            .then((bool isSuccess) {\n          if (isSuccess) {\n            Timer(Duration(seconds: 1), () async {\n              if (Provider.of<AuthProvider>(context, listen: false)\n                  .isLoggedIn()) {\n                Provider.of<AuthProvider>(context, listen: false).updateToken();\n                await Provider.of<ProfileProvider>(context, listen: false)\n                    .getUserInfo(context);\n                Navigator.of(context).pushAndRemoveUntil(\n                    MaterialPageRoute(builder: (_) => CustomBottomNav()),\n                    (route) => false);\n              } else {\n                Navigator.of(context).pushAndRemoveUntil(\n                    MaterialPageRoute(builder: (_) => CustomBottomNav()),\n                    (route) => false);\n              }\n            });\n          }\n        });\n      }\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Theme.of(context).primaryColor,\n      key: _globalKey,\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          crossAxisAlignment: CrossAxisAlignment.center,\n          children: [\n            Image.asset(\n              'assets/image/logo.png',\n              width: MediaQuery.of(context).size.width * .9,\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
        }
    ]
}