{
    "sourceFile": "lib/view/screens/classified/create_classified_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1667569428378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1667569428378,
            "name": "Commit-0",
            "content": "import 'dart:io';\r\n\r\nimport 'package:ainsighter/data/model/response/classified_model.dart';\r\nimport 'package:ainsighter/provider/address_provider.dart';\r\nimport 'package:ainsighter/provider/auth_provider.dart';\r\nimport 'package:ainsighter/provider/category_provider.dart';\r\nimport 'package:ainsighter/provider/classified_provider.dart';\r\nimport 'package:ainsighter/utill/app_constants.dart';\r\nimport 'package:ainsighter/utill/config.dart';\r\nimport 'package:ainsighter/view/base/custom_app_bar.dart';\r\nimport 'package:ainsighter/view/base/custom_secondary_button.dart';\r\nimport 'package:ainsighter/view/base/custom_snackbar.dart';\r\nimport 'package:dio/dio.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/services.dart';\r\nimport 'package:image_cropper/image_cropper.dart';\r\nimport 'package:image_picker/image_picker.dart';\r\nimport 'package:intl/intl.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:selectify/selectify.dart';\r\nimport 'package:currency_text_input_formatter/currency_text_input_formatter.dart';\r\n\r\nimport 'classified_filter_screen.dart';\r\n\r\nclass CreateClassifiedScreen extends StatefulWidget {\r\n  final int classifiedId;\r\n\r\n  CreateClassifiedScreen({this.classifiedId});\r\n\r\n  @override\r\n  _CreateClassifiedScreenState createState() => _CreateClassifiedScreenState();\r\n}\r\n\r\nclass _CreateClassifiedScreenState extends State<CreateClassifiedScreen> {\r\n  TextEditingController _titleController = TextEditingController();\r\n  TextEditingController _descController = TextEditingController();\r\n  TextEditingController _priceController = TextEditingController();\r\n\r\n  bool _policyApproved = false;\r\n\r\n  bool imageValidate = false;\r\n  bool titleValidate = false;\r\n  bool descValidate = false;\r\n  bool priceValidate = false;\r\n  bool usageStatusValidate = false;\r\n  bool categoryValidate = false;\r\n  bool cityValidate = false;\r\n  bool districtValidate = false;\r\n  bool neighborhoodValidate = false;\r\n\r\n  int _usageStatusId;\r\n  int _categoryId;\r\n  int _cityId;\r\n  int _districtId;\r\n  int _neighborhoodId;\r\n\r\n  List<dynamic> _imageList = [];\r\n\r\n  final picker = ImagePicker();\r\n\r\n  static final RegExp numberRegExp = RegExp(\"[0-9]\");\r\n\r\n  File _file;\r\n\r\n  bool _imageLoading = false;\r\n\r\n  List<S2Choice<int>> usageStatus = [\r\n    S2Choice<int>(value: 1, title: 'Yeni'),\r\n    S2Choice<int>(value: 2, title: 'Yeni Gibi'),\r\n    S2Choice<int>(value: 3, title: 'İyi'),\r\n    S2Choice<int>(value: 4, title: 'Makul'),\r\n    S2Choice<int>(value: 5, title: 'Yıpranmış'),\r\n  ];\r\n\r\n  bool _loading = false;\r\n\r\n  static const _locale = 'tr';\r\n  String _formatNumber(String s) =>\r\n      NumberFormat.decimalPattern(_locale).format(int.parse(s));\r\n  String get _currency =>\r\n      NumberFormat.compactSimpleCurrency(locale: _locale).currencySymbol;\r\n\r\n  final CurrencyTextInputFormatter formatter =\r\n      CurrencyTextInputFormatter(symbol: '₺ ', locale: 'tr', decimalDigits: 0);\r\n\r\n  @override\r\n  void initState() {\r\n    Future.microtask(() async {\r\n      if (widget.classifiedId != null) {\r\n        setState(() {\r\n          _loading = true;\r\n        });\r\n\r\n        ClassifiedModel clsf =\r\n            await Provider.of<ClassifiedProvider>(context, listen: false)\r\n                .getClassifiedById(context, widget.classifiedId);\r\n\r\n        try {\r\n          setState(() {\r\n            _loading = false;\r\n            _imageList = clsf.images;\r\n            _titleController.text = clsf.title;\r\n            _descController.text = clsf.description;\r\n            _priceController.text = formatter.format(clsf.price.toString());\r\n            _usageStatusId = clsf.usageStatusId;\r\n            _categoryId = clsf.categoryId;\r\n            _cityId = clsf.cityId;\r\n            _districtId = clsf.districtId;\r\n            _neighborhoodId = clsf.neighborhoodId;\r\n          });\r\n        } catch (e) {\r\n          print(e.toString());\r\n        }\r\n      }\r\n    });\r\n    super.initState();\r\n  }\r\n\r\n  getImage(BuildContext context) {\r\n    // set up the buttons\r\n    Widget cameraButton = ElevatedButton(\r\n      child: Text(\"Kamera\"),\r\n      onPressed: () async {\r\n        Navigator.of(context).pop();\r\n\r\n        var image = await picker.pickImage(source: ImageSource.camera);\r\n\r\n        File croppedFile = await ImageCropper().cropImage(\r\n            sourcePath: image.path,\r\n            aspectRatioPresets: [\r\n              CropAspectRatioPreset.square,\r\n              CropAspectRatioPreset.ratio3x2,\r\n              CropAspectRatioPreset.original,\r\n              CropAspectRatioPreset.ratio4x3,\r\n              CropAspectRatioPreset.ratio16x9\r\n            ],\r\n            androidUiSettings: AndroidUiSettings(\r\n                toolbarTitle: 'Resmi Kırp',\r\n                toolbarColor: Config.PrimaryColor,\r\n                toolbarWidgetColor: Colors.white,\r\n                initAspectRatio: CropAspectRatioPreset.original,\r\n                lockAspectRatio: false),\r\n            iosUiSettings: IOSUiSettings(\r\n              doneButtonTitle: \"Tamam\",\r\n              cancelButtonTitle: \"Vazgeç\",\r\n              minimumAspectRatio: 1.0,\r\n            ));\r\n\r\n        uploadImage(croppedFile);\r\n      },\r\n    );\r\n\r\n    Widget galleryButton = ElevatedButton(\r\n      child: Text(\"Galeri\"),\r\n      onPressed: () async {\r\n        Navigator.of(context).pop();\r\n\r\n        var image = await picker.pickImage(source: ImageSource.gallery);\r\n\r\n        File croppedFile = await ImageCropper().cropImage(\r\n            sourcePath: image.path,\r\n            aspectRatioPresets: [\r\n              CropAspectRatioPreset.square,\r\n              CropAspectRatioPreset.ratio3x2,\r\n              CropAspectRatioPreset.original,\r\n              CropAspectRatioPreset.ratio4x3,\r\n              CropAspectRatioPreset.ratio16x9\r\n            ],\r\n            androidUiSettings: AndroidUiSettings(\r\n                toolbarTitle: 'Resmi Kırp',\r\n                toolbarColor: Config.PrimaryColor,\r\n                toolbarWidgetColor: Colors.white,\r\n                initAspectRatio: CropAspectRatioPreset.original,\r\n                lockAspectRatio: false),\r\n            iosUiSettings: IOSUiSettings(\r\n              minimumAspectRatio: 1.0,\r\n              doneButtonTitle: \"Tamam\",\r\n              cancelButtonTitle: \"Vazgeç\",\r\n            ));\r\n\r\n        uploadImage(croppedFile);\r\n      },\r\n    );\r\n\r\n    Widget cancelButton = ElevatedButton(\r\n      child: Text(\"İptal\"),\r\n      onPressed: () {\r\n        Navigator.of(context).pop();\r\n      },\r\n    );\r\n\r\n    // set up the AlertDialog\r\n    AlertDialog alert = AlertDialog(\r\n      title: Text(\"Resim Seçimi\"),\r\n//      content: Text(\"Bir resim seçin...\"),\r\n      actions: [\r\n        cameraButton,\r\n        galleryButton,\r\n        cancelButton,\r\n      ],\r\n    );\r\n\r\n    // show the dialog\r\n    showDialog(\r\n      context: context,\r\n      builder: (BuildContext context) {\r\n        return alert;\r\n      },\r\n    );\r\n  }\r\n\r\n  Future<String> uploadImage(File file) async {\r\n    String fileName = file.path.split('/').last;\r\n\r\n    setState(() {\r\n      _imageLoading = true;\r\n    });\r\n\r\n    FormData formData = FormData.fromMap({\r\n      \"image\": await MultipartFile.fromFile(file.path, filename: fileName),\r\n      \"directory\": \"classifieds\"\r\n    });\r\n\r\n    final url = await Provider.of<ClassifiedProvider>(context, listen: false)\r\n        .uploadImage(formData);\r\n\r\n    setState(() {\r\n      _imageLoading = false;\r\n    });\r\n\r\n    print('resim burada ' + url);\r\n\r\n    _imageList.add(url);\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Scaffold(\r\n        backgroundColor: Colors.white,\r\n        body: CustomScrollView(\r\n          physics: ClampingScrollPhysics(),\r\n          slivers: [\r\n            SliverPersistentHeader(\r\n              pinned: true,\r\n              delegate: MyHeaderDelegate(classifiedId: widget.classifiedId),\r\n            ),\r\n            SliverToBoxAdapter(\r\n              child: renderBody(),\r\n            )\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget renderBody() {\r\n    if (widget.classifiedId != null && _loading)\r\n      return SizedBox(\r\n        height: MediaQuery.of(context).size.height - 160,\r\n        child: Center(child: CircularProgressIndicator()),\r\n      );\r\n    else {\r\n      return SingleChildScrollView(\r\n        physics: NeverScrollableScrollPhysics(),\r\n        padding: EdgeInsets.symmetric(vertical: 20, horizontal: 0),\r\n        child: Column(\r\n          children: [\r\n            // _classifiedImage(),\r\n            SizedBox(\r\n              height: 80,\r\n              child: ListView.separated(\r\n                  padding: EdgeInsets.symmetric(horizontal: 10),\r\n                  scrollDirection: Axis.horizontal,\r\n                  itemBuilder: (BuildContext context, int index) {\r\n                    if (index == 0)\r\n                      return InkWell(\r\n                        onTap: () {\r\n                          getImage(context);\r\n                        },\r\n                        child: ClipRRect(\r\n                          child: Container(\r\n                            width: 80,\r\n                            height: 80,\r\n                            decoration: BoxDecoration(\r\n                                color: Colors.grey.shade200,\r\n                                borderRadius: BorderRadius.circular(5),\r\n                                border: Border.all(\r\n                                    color: imageValidate\r\n                                        ? Colors.red\r\n                                        : Colors.transparent,\r\n                                    width: 1)),\r\n                            child: Center(\r\n                              child: _imageLoading\r\n                                  ? SizedBox(\r\n                                      height: 20,\r\n                                      width: 20,\r\n                                      child: CircularProgressIndicator())\r\n                                  : Icon(\r\n                                      Icons.upload_sharp,\r\n                                      color: Colors.grey.shade600,\r\n                                    ),\r\n                            ),\r\n                          ),\r\n                          borderRadius: BorderRadius.circular(5),\r\n                        ),\r\n                      );\r\n                    else\r\n                      return ClipRRect(\r\n                        child: Stack(\r\n                          alignment: Alignment.center,\r\n                          children: [\r\n                            Container(\r\n                              width: 80,\r\n                              height: 80,\r\n                              decoration: BoxDecoration(\r\n                                  color: Colors.grey.shade200,\r\n                                  image: DecorationImage(\r\n                                      fit: BoxFit.cover,\r\n                                      image: NetworkImage(\r\n                                        '${AppConstants.BASE_URL}/storage/app/public/classifieds/${_imageList[index - 1]}',\r\n                                      ))),\r\n                            ),\r\n                            Container(\r\n                              decoration: BoxDecoration(\r\n                                color: Colors.black38,\r\n                                shape: BoxShape.circle,\r\n                              ),\r\n                              child: IconButton(\r\n                                padding: EdgeInsets.zero,\r\n                                onPressed: () {\r\n                                  setState(() {\r\n                                    _imageList.removeAt(index - 1);\r\n                                  });\r\n                                },\r\n                                icon: Icon(Icons.delete),\r\n                                iconSize: 22,\r\n                                color: Colors.white,\r\n                                visualDensity: VisualDensity.compact,\r\n                              ),\r\n                            )\r\n                          ],\r\n                        ),\r\n                        borderRadius: BorderRadius.circular(5),\r\n                      );\r\n                  },\r\n                  separatorBuilder: (BuildContext context, int index) {\r\n                    return SizedBox(width: 8);\r\n                  },\r\n                  itemCount: _imageList.length + 1),\r\n            ),\r\n            SizedBox(\r\n              height: 10,\r\n            ),\r\n            Padding(\r\n              padding: const EdgeInsets.symmetric(horizontal: 10),\r\n              child: Column(\r\n                children: [\r\n                  ClipRRect(\r\n                    borderRadius: BorderRadius.circular(5),\r\n                    child: TextFormField(\r\n                      style: const TextStyle(\r\n                        fontSize: 15,\r\n                        height: 1.4,\r\n                      ),\r\n                      keyboardType: TextInputType.text,\r\n                      autocorrect: false,\r\n                      controller: _titleController,\r\n                      decoration: InputDecoration(\r\n                        filled: true,\r\n                        suffixIcon: titleValidate\r\n                            ? Icon(\r\n                                Icons.error,\r\n                                color: Colors.redAccent,\r\n                                size: 22,\r\n                              )\r\n                            : null,\r\n                        fillColor: Color(0xffedebeb),\r\n                        border: InputBorder.none,\r\n                        labelText: 'İlan Başlığı',\r\n                        labelStyle: TextStyle(\r\n                          fontSize: 14,\r\n                          color: Colors.black38,\r\n                          fontWeight: FontWeight.w500,\r\n                        ),\r\n                        contentPadding: EdgeInsets.symmetric(\r\n                          vertical: 10.0,\r\n                          horizontal: 14.0,\r\n                        ),\r\n                        isDense: true,\r\n                        floatingLabelStyle: TextStyle(\r\n                          fontSize: 12,\r\n                          height: 1.3,\r\n                          color: Colors.grey,\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                  SizedBox(\r\n                    height: 10,\r\n                  ),\r\n                  ClipRRect(\r\n                    borderRadius: BorderRadius.circular(5),\r\n                    child: TextFormField(\r\n                      controller: _descController,\r\n                      maxLines: 5,\r\n                      style: const TextStyle(\r\n                        fontSize: 15,\r\n                        height: 1.4,\r\n                      ),\r\n                      keyboardType: TextInputType.text,\r\n                      autocorrect: false,\r\n                      decoration: InputDecoration(\r\n                        // errorText: descValidate\r\n                        //     ? 'Bu alanı doldurmalısınız!'\r\n                        //     : null,\r\n                        suffixIcon: descValidate\r\n                            ? Icon(\r\n                                Icons.error,\r\n                                color: Colors.redAccent,\r\n                                size: 22,\r\n                              )\r\n                            : null,\r\n                        filled: true,\r\n                        fillColor: Color(0xffedebeb),\r\n                        border: InputBorder.none,\r\n                        labelText: 'İlan Açıklaması',\r\n                        alignLabelWithHint: true,\r\n                        labelStyle: TextStyle(\r\n                          fontSize: 14,\r\n                          color: Colors.black38,\r\n                          fontWeight: FontWeight.w500,\r\n                        ),\r\n                        contentPadding: EdgeInsets.symmetric(\r\n                          vertical: 10.0,\r\n                          horizontal: 16.0,\r\n                        ),\r\n                        hoverColor: Colors.red,\r\n                        focusColor: Colors.red,\r\n                        floatingLabelStyle: TextStyle(\r\n                          fontSize: 12,\r\n                          height: 1.3,\r\n                          color: Colors.grey,\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                  SizedBox(\r\n                    height: 10,\r\n                  ),\r\n                  ClipRRect(\r\n                    borderRadius: BorderRadius.circular(5),\r\n                    child: TextFormField(\r\n                      style: const TextStyle(\r\n                        fontSize: 15,\r\n                        height: 1.4,\r\n                      ),\r\n                      keyboardType: TextInputType.number,\r\n                      // inputFormatters: [\r\n                      //   FilteringTextInputFormatter.digitsOnly,\r\n                      // ],\r\n                      inputFormatters: <TextInputFormatter>[\r\n                        formatter,\r\n                      ],\r\n                      autocorrect: false,\r\n                      controller: _priceController,\r\n                      decoration: InputDecoration(\r\n                        // errorText: priceValidate\r\n                        //     ? 'Lütfen geçerli bir fiyat girin!'\r\n                        //     : null,\r\n                        errorBorder: priceValidate\r\n                            ? OutlineInputBorder(\r\n                                borderSide: BorderSide(color: Colors.red))\r\n                            : InputBorder.none,\r\n                        suffixIcon: descValidate\r\n                            ? Icon(\r\n                                Icons.error,\r\n                                color: Colors.redAccent,\r\n                                size: 22,\r\n                              )\r\n                            : null,\r\n                        filled: true,\r\n                        fillColor: Color(0xffedebeb),\r\n                        border: InputBorder.none,\r\n                        alignLabelWithHint: false,\r\n                        labelText: 'Fiyat',\r\n                        labelStyle: TextStyle(\r\n                          fontSize: 14,\r\n                          color: Colors.black38,\r\n                          fontWeight: FontWeight.w500,\r\n                        ),\r\n                        contentPadding: EdgeInsets.symmetric(\r\n                          vertical: 10.0,\r\n                          horizontal: 16.0,\r\n                        ),\r\n                        hoverColor: Colors.red,\r\n                        focusColor: Colors.red,\r\n                        floatingLabelStyle: TextStyle(\r\n                          fontSize: 12,\r\n                          height: 1.3,\r\n                          color: Colors.grey,\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                  SizedBox(\r\n                    height: 10,\r\n                  ),\r\n                  SmartSelect<int>.single(\r\n                      title: 'Kullanım Durumu',\r\n                      choiceItems: usageStatus,\r\n                      tileBuilder: (con, d) {\r\n                        return InkWell(\r\n                          onTap: d.showModal,\r\n                          child: Container(\r\n                            padding: EdgeInsets.symmetric(horizontal: 16),\r\n                            height: 60,\r\n                            width: double.infinity,\r\n                            decoration: BoxDecoration(\r\n                              color: Color(0xffedebeb),\r\n                              border: Border.all(\r\n                                  color: usageStatusValidate\r\n                                      ? Colors.redAccent\r\n                                      : Colors.transparent,\r\n                                  width: 1),\r\n                              borderRadius: BorderRadius.circular(5),\r\n                            ),\r\n                            child: Center(\r\n                              child: RichText(\r\n                                textAlign: TextAlign.center,\r\n                                maxLines: 1,\r\n                                overflow: TextOverflow.ellipsis,\r\n                                text: TextSpan(children: <TextSpan>[\r\n                                  TextSpan(\r\n                                    text: d.value == null\r\n                                        ? d.title\r\n                                        : d.valueDisplay,\r\n                                    style: TextStyle(fontSize: 15),\r\n                                  ),\r\n                                  TextSpan(text: ' '),\r\n                                  TextSpan(\r\n                                    text: '(Seçiniz)',\r\n                                    style: TextStyle(fontSize: 12),\r\n                                  )\r\n                                ], style: TextStyle(color: Colors.black54)),\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        );\r\n                      },\r\n                      choiceType: S2ChoiceType.radios,\r\n                      value: _usageStatusId,\r\n                      onChange: (state) {\r\n                        setState(() {\r\n                          _usageStatusId = state.value;\r\n                        });\r\n                      }),\r\n                  SizedBox(\r\n                    height: 10,\r\n                  ),\r\n                  FutureBuilder<List<S2Choice<int>>>(\r\n                      initialData: [],\r\n                      future:\r\n                          Provider.of<CategoryProvider>(context, listen: false)\r\n                              .getCategoryDropdown(context),\r\n                      builder: (context, snapshot) {\r\n                        return SmartSelect<int>.single(\r\n                            title: 'Kategori',\r\n                            choiceItems: snapshot.data,\r\n                            choiceEmptyBuilder: (con, d) {\r\n                              return Center(\r\n                                child: Column(\r\n                                  mainAxisAlignment: MainAxisAlignment.center,\r\n                                  children: [\r\n                                    Icon(\r\n                                      Icons.search,\r\n                                      color: Colors.grey.shade400,\r\n                                      size: 72,\r\n                                    ),\r\n                                    SizedBox(\r\n                                      height: 20,\r\n                                    ),\r\n                                    Text(\r\n                                      'Hiç sonuç bulunamadı',\r\n                                      textAlign: TextAlign.center,\r\n                                      style: TextStyle(\r\n                                        color: Colors.grey.shade500,\r\n                                        fontSize: 15,\r\n                                      ),\r\n                                    )\r\n                                  ],\r\n                                ),\r\n                              );\r\n                            },\r\n                            tileBuilder: (con, d) {\r\n                              return InkWell(\r\n                                onTap: d.showModal,\r\n                                child: Container(\r\n                                  padding: EdgeInsets.symmetric(horizontal: 16),\r\n                                  height: 60,\r\n                                  width: double.infinity,\r\n                                  decoration: BoxDecoration(\r\n                                    color: Color(0xffedebeb),\r\n                                    border: Border.all(\r\n                                        color: categoryValidate\r\n                                            ? Colors.redAccent\r\n                                            : Colors.transparent,\r\n                                        width: 1),\r\n                                    borderRadius: BorderRadius.circular(5),\r\n                                  ),\r\n                                  child: Center(\r\n                                    child: RichText(\r\n                                      textAlign: TextAlign.center,\r\n                                      maxLines: 1,\r\n                                      overflow: TextOverflow.ellipsis,\r\n                                      text: TextSpan(\r\n                                          children: <TextSpan>[\r\n                                            TextSpan(\r\n                                              text: d.value == null\r\n                                                  ? d.title\r\n                                                  : d.valueDisplay,\r\n                                              style: TextStyle(fontSize: 15),\r\n                                            ),\r\n                                            TextSpan(text: ' '),\r\n                                            TextSpan(\r\n                                              text: '(Seçiniz)',\r\n                                              style: TextStyle(fontSize: 12),\r\n                                            )\r\n                                          ],\r\n                                          style:\r\n                                              TextStyle(color: Colors.black54)),\r\n                                    ),\r\n                                  ),\r\n                                ),\r\n                              );\r\n                            },\r\n                            choiceType: S2ChoiceType.radios,\r\n                            value: _categoryId,\r\n                            onChange: (state) {\r\n                              setState(() {\r\n                                _categoryId = state.value;\r\n                              });\r\n                            });\r\n                      }),\r\n                  SizedBox(\r\n                    height: 10,\r\n                  ),\r\n                  FutureBuilder<List<S2Choice<int>>>(\r\n                      initialData: [],\r\n                      future:\r\n                          Provider.of<AddressProvider>(context, listen: false)\r\n                              .getCityList(context),\r\n                      builder: (context, snapshot) {\r\n                        return SmartSelect<int>.single(\r\n                            title: 'Şehir',\r\n                            choiceItems: snapshot.data,\r\n                            choiceEmptyBuilder: (con, d) {\r\n                              return Center(\r\n                                child: Column(\r\n                                  mainAxisAlignment: MainAxisAlignment.center,\r\n                                  children: [\r\n                                    Icon(\r\n                                      Icons.search,\r\n                                      color: Colors.grey.shade400,\r\n                                      size: 72,\r\n                                    ),\r\n                                    SizedBox(\r\n                                      height: 20,\r\n                                    ),\r\n                                    Text(\r\n                                      'Hiç sonuç bulunamadı',\r\n                                      textAlign: TextAlign.center,\r\n                                      style: TextStyle(\r\n                                        color: Colors.grey.shade500,\r\n                                        fontSize: 15,\r\n                                      ),\r\n                                    )\r\n                                  ],\r\n                                ),\r\n                              );\r\n                            },\r\n                            tileBuilder: (con, d) {\r\n                              return InkWell(\r\n                                onTap: d.showModal,\r\n                                child: Container(\r\n                                  padding: EdgeInsets.symmetric(horizontal: 16),\r\n                                  height: 60,\r\n                                  width: double.infinity,\r\n                                  decoration: BoxDecoration(\r\n                                    color: Color(0xffedebeb),\r\n                                    border: Border.all(\r\n                                        color: cityValidate\r\n                                            ? Colors.redAccent\r\n                                            : Colors.transparent,\r\n                                        width: 1),\r\n                                    borderRadius: BorderRadius.circular(5),\r\n                                  ),\r\n                                  child: Center(\r\n                                    child: RichText(\r\n                                      textAlign: TextAlign.center,\r\n                                      maxLines: 1,\r\n                                      overflow: TextOverflow.ellipsis,\r\n                                      text: TextSpan(\r\n                                          children: <TextSpan>[\r\n                                            TextSpan(\r\n                                              text: d.value == null\r\n                                                  ? d.title\r\n                                                  : d.valueDisplay,\r\n                                              style: TextStyle(fontSize: 15),\r\n                                            ),\r\n                                            TextSpan(text: ' '),\r\n                                            TextSpan(\r\n                                              text: '(Seçiniz)',\r\n                                              style: TextStyle(fontSize: 12),\r\n                                            )\r\n                                          ],\r\n                                          style:\r\n                                              TextStyle(color: Colors.black54)),\r\n                                    ),\r\n                                  ),\r\n                                ),\r\n                              );\r\n                            },\r\n                            choiceType: S2ChoiceType.radios,\r\n                            value: _cityId,\r\n                            onChange: (state) {\r\n                              setState(() {\r\n                                _cityId = state.value;\r\n                                _districtId = null;\r\n                                _neighborhoodId = null;\r\n                              });\r\n                            });\r\n                      }),\r\n                  SizedBox(\r\n                    height: 10,\r\n                  ),\r\n                  FutureBuilder<List<S2Choice<int>>>(\r\n                      initialData: [],\r\n                      future:\r\n                          Provider.of<AddressProvider>(context, listen: false)\r\n                              .getDistrictList(context, _cityId),\r\n                      builder: (context, snapshot) {\r\n                        return SmartSelect<int>.single(\r\n                            title: 'İlçe',\r\n                            placeholder: 'İlçe',\r\n                            choiceItems: snapshot.data,\r\n                            choiceEmptyBuilder: (con, d) {\r\n                              return Center(\r\n                                child: Column(\r\n                                  mainAxisAlignment: MainAxisAlignment.center,\r\n                                  children: [\r\n                                    Icon(\r\n                                      Icons.search,\r\n                                      color: Colors.grey.shade400,\r\n                                      size: 72,\r\n                                    ),\r\n                                    SizedBox(\r\n                                      height: 20,\r\n                                    ),\r\n                                    Text(\r\n                                      'Hiç sonuç bulunamadı',\r\n                                      textAlign: TextAlign.center,\r\n                                      style: TextStyle(\r\n                                        color: Colors.grey.shade500,\r\n                                        fontSize: 15,\r\n                                      ),\r\n                                    )\r\n                                  ],\r\n                                ),\r\n                              );\r\n                            },\r\n                            tileBuilder: (con, d) {\r\n                              return InkWell(\r\n                                onTap: d.showModal,\r\n                                child: Container(\r\n                                  padding: EdgeInsets.symmetric(horizontal: 16),\r\n                                  height: 60,\r\n                                  width: double.infinity,\r\n                                  decoration: BoxDecoration(\r\n                                    color: Color(0xffedebeb),\r\n                                    border: Border.all(\r\n                                        color: districtValidate\r\n                                            ? Colors.redAccent\r\n                                            : Colors.transparent,\r\n                                        width: 1),\r\n                                    borderRadius: BorderRadius.circular(5),\r\n                                  ),\r\n                                  child: Center(\r\n                                    child: RichText(\r\n                                      textAlign: TextAlign.center,\r\n                                      maxLines: 1,\r\n                                      overflow: TextOverflow.ellipsis,\r\n                                      text: TextSpan(\r\n                                          children: <TextSpan>[\r\n                                            TextSpan(\r\n                                              text: d.value == null\r\n                                                  ? d.title\r\n                                                  : d.valueDisplay,\r\n                                              style: TextStyle(fontSize: 15),\r\n                                            ),\r\n                                            TextSpan(text: ' '),\r\n                                            TextSpan(\r\n                                              text: '(Seçiniz)',\r\n                                              style: TextStyle(fontSize: 12),\r\n                                            )\r\n                                          ],\r\n                                          style:\r\n                                              TextStyle(color: Colors.black54)),\r\n                                    ),\r\n                                  ),\r\n                                ),\r\n                              );\r\n                            },\r\n                            choiceType: S2ChoiceType.radios,\r\n                            value: _districtId,\r\n                            onChange: (state) {\r\n                              setState(() {\r\n                                _districtId = state.value;\r\n                                _neighborhoodId = null;\r\n                              });\r\n                            });\r\n                      }),\r\n                  SizedBox(\r\n                    height: 10,\r\n                  ),\r\n                  FutureBuilder<List<S2Choice<int>>>(\r\n                      initialData: [],\r\n                      future: Provider.of<AddressProvider>(context,\r\n                              listen: false)\r\n                          .getNeighborhoodListByDistrict(context, _districtId),\r\n                      builder: (context, snapshot) {\r\n                        return SmartSelect<int>.single(\r\n                            title: 'Mahalle',\r\n                            placeholder: 'Mahalle',\r\n                            choiceItems: snapshot.data,\r\n                            choiceEmptyBuilder: (con, d) {\r\n                              return Center(\r\n                                child: Column(\r\n                                  mainAxisAlignment: MainAxisAlignment.center,\r\n                                  children: [\r\n                                    Icon(\r\n                                      Icons.search,\r\n                                      color: Colors.grey.shade400,\r\n                                      size: 72,\r\n                                    ),\r\n                                    SizedBox(\r\n                                      height: 20,\r\n                                    ),\r\n                                    Text(\r\n                                      'Hiç sonuç bulunamadı',\r\n                                      textAlign: TextAlign.center,\r\n                                      style: TextStyle(\r\n                                        color: Colors.grey.shade500,\r\n                                        fontSize: 15,\r\n                                      ),\r\n                                    )\r\n                                  ],\r\n                                ),\r\n                              );\r\n                            },\r\n                            tileBuilder: (con, d) {\r\n                              return InkWell(\r\n                                onTap: d.showModal,\r\n                                child: Container(\r\n                                  padding: EdgeInsets.symmetric(horizontal: 16),\r\n                                  height: 60,\r\n                                  width: double.infinity,\r\n                                  decoration: BoxDecoration(\r\n                                    color: Color(0xffedebeb),\r\n                                    border: Border.all(\r\n                                        color: neighborhoodValidate\r\n                                            ? Colors.redAccent\r\n                                            : Colors.transparent,\r\n                                        width: 1),\r\n                                    borderRadius: BorderRadius.circular(5),\r\n                                  ),\r\n                                  child: Center(\r\n                                    child: RichText(\r\n                                      textAlign: TextAlign.center,\r\n                                      maxLines: 1,\r\n                                      overflow: TextOverflow.ellipsis,\r\n                                      text: TextSpan(\r\n                                          children: <TextSpan>[\r\n                                            TextSpan(\r\n                                              text: d.value == null\r\n                                                  ? d.title\r\n                                                  : d.valueDisplay,\r\n                                              style: TextStyle(fontSize: 15),\r\n                                            ),\r\n                                            TextSpan(text: ' '),\r\n                                            TextSpan(\r\n                                              text: '(Seçiniz)',\r\n                                              style: TextStyle(fontSize: 12),\r\n                                            )\r\n                                          ],\r\n                                          style:\r\n                                              TextStyle(color: Colors.black54)),\r\n                                    ),\r\n                                  ),\r\n                                ),\r\n                              );\r\n                            },\r\n                            choiceType: S2ChoiceType.radios,\r\n                            value: _neighborhoodId,\r\n                            onChange: (state) =>\r\n                                setState(() => _neighborhoodId = state.value));\r\n                      }),\r\n                ],\r\n              ),\r\n            ),\r\n            // SizedBox(\r\n            //   height: 10,\r\n            // ),\r\n            // Padding(\r\n            //   padding: const EdgeInsets.symmetric(horizontal: 0),\r\n            //   child: CheckboxListTile(\r\n            //     shape: RoundedRectangleBorder(\r\n            //         borderRadius: BorderRadius.circular(5)),\r\n            //     value: _policyApproved,\r\n            //     dense: true,\r\n            //     contentPadding: EdgeInsets.only(left: 10),\r\n            //     title: Text(\r\n            //       'Sözleşmeyi onaylıyorum.',\r\n            //       style: TextStyle(fontSize: 14, color: Colors.black54),\r\n            //     ),\r\n            //     checkColor: Colors.white,\r\n            //     activeColor: Config.PrimaryColor,\r\n            //     //tileColor: Colors.grey.shade200,\r\n            //     onChanged: (val) {\r\n            //       setState(() {\r\n            //         _policyApproved = val;\r\n            //       });\r\n            //     },\r\n            //   ),\r\n            // ),\r\n            SizedBox(\r\n              height: 10,\r\n            ),\r\n            Consumer<ClassifiedProvider>(\r\n              builder: (context, brnch, child) => Padding(\r\n                padding: const EdgeInsets.all(10),\r\n                child: CustomSecondaryButton(\r\n                    text: widget.classifiedId != null\r\n                        ? 'Güncelle'\r\n                        : 'Yayına Gönder',\r\n                    color: Config.PrimaryColor,\r\n                    isLoading:\r\n                        Provider.of<ClassifiedProvider>(context, listen: false)\r\n                            .isLoading,\r\n                    onPress: () async {\r\n                      validateImage(_imageList);\r\n                      validateTitle(_titleController.text);\r\n                      validateDesc(_descController.text);\r\n                      validatePrice(_priceController.text);\r\n                      validateUsageStatus(_usageStatusId);\r\n                      validateCategory(_categoryId);\r\n                      validateCity(_cityId);\r\n                      validateDistrict(_districtId);\r\n                      validateNeighborhood(_neighborhoodId);\r\n\r\n                      if (widget.classifiedId != null) {\r\n                        await Provider.of<ClassifiedProvider>(context,\r\n                                listen: false)\r\n                            .updateClassified(context,\r\n                                classifiedId: widget.classifiedId,\r\n                                title: _titleController.text,\r\n                                description: _descController.text,\r\n                                price: _priceController.text.isNotEmpty\r\n                                    ? formatter.getUnformattedValue().toDouble()\r\n                                    : null,\r\n                                images: _imageList,\r\n                                categoryId: _categoryId,\r\n                                usageStatusId: _usageStatusId,\r\n                                cityId: _cityId,\r\n                                districtId: _districtId,\r\n                                neighborhoodId: _neighborhoodId);\r\n                      } else {\r\n                        await Provider.of<ClassifiedProvider>(context,\r\n                                listen: false)\r\n                            .createClassified(context,\r\n                                title: _titleController.text,\r\n                                description: _descController.text,\r\n                                price: _priceController.text.isNotEmpty\r\n                                    ? formatter.getUnformattedValue().toDouble()\r\n                                    : null,\r\n                                images: _imageList,\r\n                                categoryId: _categoryId,\r\n                                usageStatusId: _usageStatusId,\r\n                                cityId: _cityId,\r\n                                districtId: _districtId,\r\n                                neighborhoodId: _neighborhoodId);\r\n                      }\r\n                    }),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      );\r\n    }\r\n  }\r\n\r\n  static String formatCurrency(num value, {int fractionDigits = 2}) {\r\n    ArgumentError.checkNotNull(value, 'value');\r\n\r\n    // convert cents into hundreds.\r\n    value = value / 100;\r\n\r\n    return NumberFormat.currency(\r\n            customPattern: '###,###.##',\r\n            // using Netherlands because this country also\r\n            // uses the comma for thousands and dot for decimal separators.\r\n            locale: 'tr')\r\n        .format(value);\r\n  }\r\n\r\n  bool validateTitle(String userInput) {\r\n    if (userInput.isEmpty) {\r\n      setState(() {\r\n        titleValidate = true;\r\n      });\r\n      return false;\r\n    } else\r\n      setState(() {\r\n        titleValidate = false;\r\n      });\r\n    return true;\r\n  }\r\n\r\n  bool validateImage(List images) {\r\n    if (images.isEmpty) {\r\n      setState(() {\r\n        imageValidate = true;\r\n      });\r\n      return false;\r\n    } else\r\n      setState(() {\r\n        imageValidate = false;\r\n      });\r\n    return true;\r\n  }\r\n\r\n  bool validateDesc(String userInput) {\r\n    if (userInput.isEmpty) {\r\n      setState(() {\r\n        descValidate = true;\r\n      });\r\n      return false;\r\n    } else\r\n      setState(() {\r\n        descValidate = false;\r\n      });\r\n    return true;\r\n  }\r\n\r\n  bool validatePrice(String userInput) {\r\n    if (userInput.isEmpty || !numberRegExp.hasMatch(userInput)) {\r\n      setState(() {\r\n        priceValidate = true;\r\n      });\r\n      return false;\r\n    } else\r\n      setState(() {\r\n        priceValidate = false;\r\n      });\r\n    return true;\r\n  }\r\n\r\n  bool validateUsageStatus(int userInput) {\r\n    if (userInput == null) {\r\n      setState(() {\r\n        usageStatusValidate = true;\r\n      });\r\n      return false;\r\n    } else\r\n      setState(() {\r\n        usageStatusValidate = false;\r\n      });\r\n    return true;\r\n  }\r\n\r\n  bool validateCategory(int userInput) {\r\n    if (userInput == null) {\r\n      setState(() {\r\n        categoryValidate = true;\r\n      });\r\n      return false;\r\n    } else\r\n      setState(() {\r\n        categoryValidate = false;\r\n      });\r\n    return true;\r\n  }\r\n\r\n  bool validateCity(int userInput) {\r\n    if (userInput == null) {\r\n      setState(() {\r\n        cityValidate = true;\r\n      });\r\n      return false;\r\n    } else\r\n      setState(() {\r\n        cityValidate = false;\r\n      });\r\n    return true;\r\n  }\r\n\r\n  bool validateDistrict(int userInput) {\r\n    if (userInput == null) {\r\n      setState(() {\r\n        districtValidate = true;\r\n      });\r\n      return false;\r\n    } else\r\n      setState(() {\r\n        districtValidate = false;\r\n      });\r\n    return true;\r\n  }\r\n\r\n  bool validateNeighborhood(int userInput) {\r\n    if (userInput == null) {\r\n      setState(() {\r\n        neighborhoodValidate = true;\r\n      });\r\n      return false;\r\n    } else\r\n      setState(() {\r\n        neighborhoodValidate = false;\r\n      });\r\n    return true;\r\n  }\r\n}\r\n\r\nclass MyHeaderDelegate extends SliverPersistentHeaderDelegate {\r\n  MyHeaderDelegate({this.classifiedId});\r\n\r\n  int classifiedId;\r\n\r\n  bool _search = false;\r\n\r\n  @override\r\n  Widget build(\r\n    BuildContext context,\r\n    double shrinkOffset,\r\n    bool overlapsContent,\r\n  ) {\r\n    final progress = shrinkOffset / maxExtent;\r\n\r\n    return StatefulBuilder(builder: (context, setState) {\r\n      return Material(\r\n        child: Stack(\r\n          fit: StackFit.expand,\r\n          children: [\r\n            AnimatedOpacity(\r\n              duration: const Duration(milliseconds: 150),\r\n              opacity: progress,\r\n              child: ColoredBox(\r\n                color: Theme.of(context).primaryColor,\r\n              ),\r\n            ),\r\n            AnimatedOpacity(\r\n              duration: const Duration(milliseconds: 150),\r\n              opacity: 1 - progress,\r\n              child: CustomPaint(\r\n                painter: CustomToolbarShape(\r\n                  showBar: false,\r\n                ),\r\n              ),\r\n            ),\r\n            AnimatedContainer(\r\n              duration: const Duration(milliseconds: 100),\r\n              padding: EdgeInsets.lerp(\r\n                EdgeInsets.symmetric(horizontal: 16, vertical: 10),\r\n                EdgeInsets.only(bottom: 0),\r\n                progress,\r\n              ),\r\n              alignment: Alignment.lerp(\r\n                Alignment.bottomLeft,\r\n                Alignment.center,\r\n                progress,\r\n              ),\r\n              child: Text(\r\n                classifiedId != null ? 'İlan Düzenle' : 'İlan Oluştur',\r\n                style: TextStyle.lerp(\r\n                  Theme.of(context)\r\n                      .textTheme\r\n                      .headline5\r\n                      .copyWith(color: Colors.white),\r\n                  Theme.of(context)\r\n                      .textTheme\r\n                      .headline6\r\n                      .copyWith(color: Colors.white),\r\n                  progress,\r\n                ),\r\n              ),\r\n            ),\r\n            AppBar(\r\n              toolbarHeight: 70,\r\n              backgroundColor: Colors.transparent,\r\n              leading: BackButton(),\r\n              elevation: 0,\r\n            )\r\n          ],\r\n        ),\r\n      );\r\n    });\r\n  }\r\n\r\n  @override\r\n  double get maxExtent => 150;\r\n\r\n  @override\r\n  double get minExtent => 70;\r\n\r\n  @override\r\n  bool shouldRebuild(covariant SliverPersistentHeaderDelegate oldDelegate) =>\r\n      true;\r\n}\r\n\r\nclass ThousandsSeparatorInputFormatter extends TextInputFormatter {\r\n  static const separator = '.'; // Change this to '.' for other locales\r\n\r\n  @override\r\n  TextEditingValue formatEditUpdate(\r\n      TextEditingValue oldValue, TextEditingValue newValue) {\r\n    // Short-circuit if the new value is empty\r\n    if (newValue.text.length == 0) {\r\n      return newValue.copyWith(text: '');\r\n    }\r\n\r\n    // Handle \"deletion\" of separator character\r\n    String oldValueText = oldValue.text.replaceAll(separator, '');\r\n    String newValueText = newValue.text.replaceAll(separator, '');\r\n\r\n    if (oldValue.text.endsWith(separator) &&\r\n        oldValue.text.length == newValue.text.length + 1) {\r\n      newValueText = newValueText.substring(0, newValueText.length - 1);\r\n    }\r\n\r\n    // Only process if the old value and new value are different\r\n    if (oldValueText != newValueText) {\r\n      int selectionIndex =\r\n          newValue.text.length - newValue.selection.extentOffset;\r\n      final chars = newValueText.split('');\r\n\r\n      String newString = '';\r\n      for (int i = chars.length - 1; i >= 0; i--) {\r\n        if ((chars.length - 1 - i) % 3 == 0 && i != chars.length - 1)\r\n          newString = separator + newString;\r\n        newString = chars[i] + newString;\r\n      }\r\n\r\n      return TextEditingValue(\r\n        text: newString.toString(),\r\n        selection: TextSelection.collapsed(\r\n          offset: newString.length - selectionIndex,\r\n        ),\r\n      );\r\n    }\r\n\r\n    // If the new value and old value are the same, just return as-is\r\n    return newValue;\r\n  }\r\n}\r\n"
        }
    ]
}