{
    "sourceFile": "lib/view/base/custom_text_field.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1667569434853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1667569434853,
            "name": "Commit-0",
            "content": "import 'package:ainsighter/utill/color_resources.dart';\nimport 'package:ainsighter/utill/config.dart';\nimport 'package:ainsighter/utill/dimensions.dart';\nimport 'package:ainsighter/utill/styles.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nclass CustomTextField extends StatefulWidget {\n  final String hintText;\n  final String labelText;\n  final TextEditingController controller;\n  final FocusNode focusNode;\n  final FocusNode nextFocus;\n  final TextInputType inputType;\n  final TextInputAction inputAction;\n  final Color fillColor;\n  final int maxLines;\n  final bool isPassword;\n  final bool isCountryPicker;\n  final bool isShowBorder;\n  final bool isIcon;\n  final bool isShowSuffixIcon;\n  final bool isShowPrefixIcon;\n  final Function onTap;\n  final Function onSuffixTap;\n  final IconData suffixIconUrl;\n  final IconData prefixIconUrl;\n  final bool isSearch;\n  final Function onSubmit;\n  final bool isEnabled;\n  final TextCapitalization capitalization;\n  final bool isElevation;\n  final bool isPadding;\n  final Function onChanged;\n  final bool alignLabelWithHint;\n  final List<TextInputFormatter> inputFormatters;\n  //final LanguageProvider languageProvider;\n\n  CustomTextField(\n      {this.hintText = 'Write something...',\n      this.labelText = 'Write something...',\n      this.controller,\n      this.focusNode,\n      this.nextFocus,\n      this.isEnabled = true,\n      this.inputType = TextInputType.text,\n      this.inputAction = TextInputAction.next,\n      this.maxLines = 1,\n      this.onSuffixTap,\n      this.fillColor,\n      this.onSubmit,\n      this.capitalization = TextCapitalization.none,\n      this.isCountryPicker = false,\n      this.isShowBorder = false,\n      this.isShowSuffixIcon = false,\n      this.isShowPrefixIcon = false,\n      this.onTap,\n      this.isIcon = false,\n      this.isPassword = false,\n      this.suffixIconUrl,\n      this.prefixIconUrl,\n      this.isSearch = false,\n      this.isElevation = true,\n      this.onChanged,\n      this.isPadding = true,\n      this.alignLabelWithHint = false,\n      this.inputFormatters});\n\n  @override\n  _CustomTextFieldState createState() => _CustomTextFieldState();\n}\n\nclass _CustomTextFieldState extends State<CustomTextField> {\n  bool _obscureText = true;\n\n  @override\n  Widget build(BuildContext context) {\n    return ClipRRect(\n      borderRadius: BorderRadius.circular(10),\n      child: TextField(\n        maxLines: widget.maxLines,\n        controller: widget.controller,\n        focusNode: widget.focusNode,\n        style: Theme.of(context).textTheme.headline2.copyWith(\n            color: Theme.of(context).textTheme.bodyText1.color,\n            fontSize: Dimensions.FONT_SIZE_LARGE),\n        textInputAction: widget.inputAction,\n        keyboardType: widget.inputType,\n        cursorColor: Theme.of(context).primaryColor,\n        textCapitalization: widget.capitalization,\n        enabled: widget.isEnabled,\n        autofocus: false,\n        //onChanged: widget.isSearch ? widget.languageProvider.searchLanguage : null,\n        obscureText: widget.isPassword ? _obscureText : false,\n        inputFormatters: widget.inputFormatters,\n        decoration: InputDecoration(\n          contentPadding: EdgeInsets.symmetric(vertical: 14, horizontal: 20),\n          border: InputBorder.none,\n          // isDense: true,\n          floatingLabelBehavior: FloatingLabelBehavior.auto,\n          hintText: widget.hintText,\n          labelText: widget.labelText,\n          isDense: true,\n          alignLabelWithHint: widget.alignLabelWithHint,\n          fillColor: Config.PrimaryColor.withOpacity(.1),\n          hintStyle: TextStyle(color: Color(0xff181818), fontSize: 14),\n          labelStyle:\n              poppinsLight.copyWith(color: Color(0xff181818), fontSize: 14),\n          floatingLabelStyle: TextStyle(fontSize: 12, color: Color(0xffa3a3a3)),\n          filled: true,\n          prefixIcon: widget.isShowPrefixIcon\n              ? IconButton(\n                  padding: EdgeInsets.all(0),\n                  icon: Icon(\n                    widget.prefixIconUrl,\n                    color: Config.PrimaryColor,\n                    size: 20,\n                  ),\n                  onPressed: () {},\n                )\n              : null,\n          // prefixIconConstraints: BoxConstraints(minWidth: 23, maxHeight: 20),\n          suffixIcon: widget.isShowSuffixIcon\n              ? widget.isPassword\n                  ? IconButton(\n                      icon: Icon(\n                          _obscureText\n                              ? Icons.visibility_off\n                              : Icons.visibility,\n                          color: Theme.of(context).hintColor.withOpacity(0.3)),\n                      onPressed: _toggle)\n                  : widget.isIcon\n                      ? IconButton(\n                          onPressed: widget.onSuffixTap,\n                          icon: Icon(widget.suffixIconUrl,\n                              color: ColorResources.getHintColor(context)),\n                        )\n                      : null\n              : null,\n        ),\n        onTap: widget.onTap,\n        onChanged: widget.onChanged,\n        onSubmitted: (text) => widget.nextFocus != null\n            ? FocusScope.of(context).requestFocus(widget.nextFocus)\n            : widget.onSubmit != null\n                ? widget.onSubmit(text)\n                : null,\n      ),\n    );\n  }\n\n  void _toggle() {\n    setState(() {\n      _obscureText = !_obscureText;\n    });\n  }\n}\n"
        }
    ]
}