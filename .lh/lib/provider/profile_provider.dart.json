{
    "sourceFile": "lib/provider/profile_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1667569434856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1667569434856,
            "name": "Commit-0",
            "content": "import 'dart:convert';\nimport 'dart:io';\n\nimport 'package:ainsighter/data/model/response/base/api_response.dart';\nimport 'package:ainsighter/data/model/response/response_model.dart';\nimport 'package:ainsighter/data/model/response/user_model.dart';\nimport 'package:ainsighter/data/model/response/userinfo_model.dart';\nimport 'package:ainsighter/data/repository/profile_repo.dart';\nimport 'package:ainsighter/helper/api_checker.dart';\nimport 'package:ainsighter/view/base/custom_navigation_bar.dart';\nimport 'package:ainsighter/view/screens/user/profile.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:image_picker/image_picker.dart';\n\nclass ProfileProvider with ChangeNotifier {\n  final ProfileRepo profileRepo;\n\n  ProfileProvider({@required this.profileRepo});\n\n  UserInfoModel _userInfoModel;\n  UserModel _profile;\n\n  UserInfoModel get userInfoModel => _userInfoModel;\n  UserModel get profile => _profile;\n\n  Future<ResponseModel> getUserInfo(BuildContext context) async {\n    ResponseModel _responseModel;\n    ApiResponse apiResponse = await profileRepo.getUserInfo();\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      _userInfoModel = UserInfoModel.fromJson(apiResponse.response.data);\n      _responseModel = ResponseModel(true, 'successful');\n    } else {\n      String _errorMessage;\n      if (apiResponse.error is String) {\n        _errorMessage = apiResponse.error.toString();\n      } else {\n        _errorMessage = apiResponse.error.errors[0].message;\n      }\n      print(_errorMessage);\n      _responseModel = ResponseModel(false, _errorMessage);\n      ApiChecker.checkApi(context, apiResponse);\n    }\n    notifyListeners();\n    return _responseModel;\n  }\n\n  getProfile(BuildContext context, UserModel userProfile) {\n    _profile = userProfile;\n\n    Navigator.of(context)\n        .push(MaterialPageRoute(builder: (_) => ProfileScreen()));\n  }\n\n  bool _isLoading = false;\n\n  bool get isLoading => _isLoading;\n\n  File _file;\n  PickedFile _data;\n\n  PickedFile get data => _data;\n\n  File get file => _file;\n  final picker = ImagePicker();\n\n  void choosePhoto() async {\n    final pickedFile = await picker.getImage(\n        source: ImageSource.gallery,\n        imageQuality: 50,\n        maxHeight: 500,\n        maxWidth: 500);\n    if (pickedFile != null) {\n      _file = File(pickedFile.path);\n    } else {\n      print('No image selected.');\n    }\n    notifyListeners();\n  }\n\n  void pickImage() async {\n    _data = await picker.getImage(\n        source: ImageSource.gallery,\n        maxHeight: 100,\n        maxWidth: 100,\n        imageQuality: 20);\n    notifyListeners();\n  }\n\n  Future<void> updateUserInfo(BuildContext context,\n      {String name, String phone, String iban}) async {\n    _isLoading = true;\n    notifyListeners();\n    ApiResponse apiResponse =\n        await profileRepo.updateProfile(name: name, phone: phone, iban: iban);\n    _isLoading = false;\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      Navigator.of(context).pushAndRemoveUntil(\n          MaterialPageRoute(\n              builder: (_) => CustomBottomNav(\n                  message: apiResponse.response.data['message'])),\n          (route) => false);\n    } else {\n      _isLoading = false;\n      ApiChecker.checkApi(context, apiResponse);\n    }\n    notifyListeners();\n  }\n}\n"
        }
    ]
}