{
    "sourceFile": "lib/provider/classified_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1667569434855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1667569434855,
            "name": "Commit-0",
            "content": "import 'package:ainsighter/data/model/response/affiliate_link_model.dart';\nimport 'package:ainsighter/data/model/response/base/api_response.dart';\nimport 'package:ainsighter/data/model/response/classified_model.dart';\nimport 'package:ainsighter/data/repository/classified_repo.dart';\nimport 'package:ainsighter/helper/api_checker.dart';\nimport 'package:ainsighter/view/base/custom_navigation_bar.dart';\nimport 'package:ainsighter/view/screens/classified/classified_screen.dart';\nimport 'package:dio/dio.dart';\nimport 'package:flutter/material.dart';\n\nclass ClassifiedProvider extends ChangeNotifier {\n  final ClassifiedRepo classifiedRepo;\n\n  ClassifiedProvider({@required this.classifiedRepo});\n\n  List<ClassifiedModel> _classifiedList;\n\n  List<ClassifiedModel> get classifiedList => _classifiedList;\n\n  bool _isLoading = false;\n\n  bool get isLoading => _isLoading;\n\n  Future<List<ClassifiedModel>> getClassifiedList(int pageKey, int pageSize,\n      {cityId,\n      districtIds,\n      neighborhoodIds,\n      landStatusIds,\n      usageStatusIds,\n      categoryIds,\n      minPrice,\n      maxPrice,\n      featured,\n      urgent,\n      keyword}) async {\n    List<ClassifiedModel> clsList = [];\n\n    ApiResponse apiResponse = await classifiedRepo.getClassifieds(pageKey,\n        cityId: cityId,\n        districtIds: districtIds,\n        neighborhoodIds: neighborhoodIds,\n        landStatusIds: landStatusIds,\n        usageStatusIds: usageStatusIds,\n        categoryIds: categoryIds,\n        minPrice: minPrice,\n        maxPrice: maxPrice,\n        featured: featured,\n        urgent: urgent,\n        keyword: keyword);\n\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      for (var singleClassified in apiResponse.response.data) {\n        clsList.add(ClassifiedModel.fromJson(singleClassified));\n      }\n    } else {\n      throw Exception('Failed to load');\n    }\n    return clsList;\n  }\n\n  Future<List<ClassifiedModel>> getFavouriteClassifiedList(int pageKey) async {\n    List<ClassifiedModel> clsList = [];\n\n    ApiResponse apiResponse =\n        await classifiedRepo.getFavouriteClassifieds(pageKey);\n\n    print('PAGEKEY: ' + pageKey.toString());\n\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      for (var singleClassified in apiResponse.response.data) {\n        clsList.add(ClassifiedModel.fromJson(singleClassified));\n      }\n    } else {\n      throw Exception('Failed to load');\n    }\n    return clsList;\n  }\n\n  Future<List<AffiliateLinkModel>> getMyAffiliateLinks() async {\n    List<AffiliateLinkModel> affiliateList = [];\n\n    ApiResponse apiResponse = await classifiedRepo.getMyAffiliateLinks();\n\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      for (var singleAffiliate in apiResponse.response.data) {\n        affiliateList.add(AffiliateLinkModel.fromJson(singleAffiliate));\n      }\n    } else {\n      throw Exception('Failed to load');\n    }\n    notifyListeners();\n    return affiliateList;\n  }\n\n  Future<List<ClassifiedModel>> getClassifiedByMe(BuildContext context) async {\n    List<ClassifiedModel> myClassifiedList = [];\n    ApiResponse apiResponse = await classifiedRepo.getClassifiedsByMe();\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      apiResponse.response.data.forEach((classified) {\n        ClassifiedModel classifiedModel = ClassifiedModel.fromJson(classified);\n        myClassifiedList.add(classifiedModel);\n      });\n    } else {\n      throw Exception('Failed to load');\n    }\n    notifyListeners();\n    return myClassifiedList;\n  }\n\n  Future<String> uploadImage(FormData formData) async {\n    ApiResponse apiResponse = await classifiedRepo.uploadImage(formData);\n\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      return apiResponse.response.data['url'];\n    } else {\n      throw Exception('Failed to load');\n    }\n  }\n\n  Future<int> generateAffiliateLink(int classifiedId) async {\n    ApiResponse apiResponse =\n        await classifiedRepo.generateAffiliateLink(classifiedId);\n\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      print(apiResponse.response.data.toString());\n      return apiResponse.response.data['url'];\n    } else {\n      throw Exception('Failed to load');\n    }\n  }\n\n  Future<bool> favouriteClassified(int classifiedId) async {\n    ApiResponse apiResponse =\n        await classifiedRepo.favouriteClassified(classifiedId);\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      bool status = apiResponse.response.data;\n\n      return status;\n    } else {\n      throw Exception('Failed to load');\n    }\n  }\n\n  Future<List<ClassifiedModel>> getFilteredClassifiedList(\n      int pageKey, int pageSize,\n      {cityIds}) async {\n    List<ClassifiedModel> clsList = [];\n\n    ApiResponse apiResponse =\n        await classifiedRepo.getFilteredClassifieds(pageKey, cityIds);\n\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      for (var singleClassified in apiResponse.response.data) {\n        clsList.add(ClassifiedModel.fromJson(singleClassified));\n      }\n    } else {\n      throw Exception('Failed to load');\n    }\n    return clsList;\n  }\n\n  Future<void> getClassifiedByUserList(BuildContext context, int userId) async {\n    ApiResponse apiResponse = await classifiedRepo.getClassifiedsByUser(userId);\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      List<ClassifiedModel> userClassifiedList = [];\n      apiResponse.response.data.forEach((classified) {\n        ClassifiedModel classifiedModel = ClassifiedModel.fromJson(classified);\n        userClassifiedList.add(classifiedModel);\n      });\n      return userClassifiedList;\n    } else {\n      ApiChecker.checkApi(context, apiResponse);\n    }\n    notifyListeners();\n  }\n\n  Future<ClassifiedModel> getClassifiedById(\n      BuildContext context, int classifiedId) async {\n    ApiResponse apiResponse =\n        await classifiedRepo.getClassifiedById(classifiedId);\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      ClassifiedModel classifiedModel =\n          ClassifiedModel.fromJson(apiResponse.response.data);\n\n      return classifiedModel;\n    } else {\n      ApiChecker.checkApi(context, apiResponse);\n    }\n    notifyListeners();\n  }\n\n  Future<void> createClassified(BuildContext context,\n      {String title,\n      String description,\n      List images,\n      double price,\n      int categoryId,\n      int usageStatusId,\n      int cityId,\n      int districtId,\n      int neighborhoodId}) async {\n    _isLoading = true;\n    ApiResponse apiResponse = await classifiedRepo.createClassified(\n        title: title,\n        description: description,\n        images: images,\n        price: price,\n        categoryId: categoryId,\n        usageStatusId: usageStatusId,\n        cityId: cityId,\n        districtId: districtId,\n        neighborhoodId: neighborhoodId);\n    _isLoading = false;\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      Navigator.of(context).pushAndRemoveUntil(\n          MaterialPageRoute(\n              builder: (_) => CustomBottomNav(\n                  message: apiResponse.response.data['message'])),\n          (route) => false);\n    } else {\n      _isLoading = false;\n      ApiChecker.checkApi(context, apiResponse);\n    }\n    notifyListeners();\n  }\n\n  Future<void> updateClassified(BuildContext context,\n      {int classifiedId,\n      String title,\n      String description,\n      List images,\n      double price,\n      int categoryId,\n      int usageStatusId,\n      int cityId,\n      int districtId,\n      int neighborhoodId}) async {\n    _isLoading = true;\n    ApiResponse apiResponse = await classifiedRepo.updateClassified(\n        classifiedId: classifiedId,\n        title: title,\n        description: description,\n        images: images,\n        price: price,\n        categoryId: categoryId,\n        usageStatusId: usageStatusId,\n        cityId: cityId,\n        districtId: districtId,\n        neighborhoodId: neighborhoodId);\n    _isLoading = false;\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      Navigator.of(context).pushAndRemoveUntil(\n          MaterialPageRoute(\n              builder: (_) => CustomBottomNav(\n                  message: apiResponse.response.data['message'])),\n          (route) => false);\n    } else {\n      _isLoading = false;\n      ApiChecker.checkApi(context, apiResponse);\n    }\n    notifyListeners();\n  }\n}\n"
        }
    ]
}