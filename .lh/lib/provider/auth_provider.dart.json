{
    "sourceFile": "lib/provider/auth_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1667569434855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1667569434855,
            "name": "Commit-0",
            "content": "import 'package:flutter/foundation.dart';\nimport 'package:ainsighter/data/model/response/base/api_response.dart';\nimport 'package:ainsighter/data/model/response/base/error_response.dart';\nimport 'package:ainsighter/data/model/response/response_model.dart';\nimport 'package:ainsighter/data/model/response/signup_model.dart';\nimport 'package:ainsighter/data/repository/auth_repo.dart';\n\nclass AuthProvider with ChangeNotifier {\n  final AuthRepo authRepo;\n\n  AuthProvider({@required this.authRepo});\n\n  // for registration section\n  bool _isLoading = false;\n\n  bool get isLoading => _isLoading;\n  String _registrationErrorMessage = '';\n\n  String get registrationErrorMessage => _registrationErrorMessage;\n\n  updateRegistrationErrorMessage(String message) {\n    _registrationErrorMessage = message;\n    notifyListeners();\n  }\n\n  Future<ResponseModel> registration(SignUpModel signUpModel) async {\n    _isLoading = true;\n    _registrationErrorMessage = '';\n    notifyListeners();\n    ApiResponse apiResponse = await authRepo.registration(signUpModel);\n    ResponseModel responseModel;\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      Map map = apiResponse.response.data;\n      String token = map[\"token\"];\n      authRepo.saveUserToken(token);\n      await authRepo.updateToken();\n      responseModel = ResponseModel(true, 'successful');\n    } else {\n      String errorMessage;\n      if (apiResponse.error is String) {\n        errorMessage = apiResponse.error.toString();\n      } else {\n        ErrorResponse errorResponse = apiResponse.error;\n        errorMessage = errorResponse.errors[0].message;\n      }\n      print(errorMessage);\n      _registrationErrorMessage = errorMessage;\n      responseModel = ResponseModel(false, errorMessage);\n    }\n    _isLoading = false;\n    notifyListeners();\n    return responseModel;\n  }\n\n  // for login section\n  String _loginErrorMessage = '';\n\n  String get loginErrorMessage => _loginErrorMessage;\n\n  Future<ResponseModel> login(String email, String password) async {\n    _isLoading = true;\n    _loginErrorMessage = '';\n    notifyListeners();\n    ApiResponse apiResponse =\n        await authRepo.login(email: email, password: password);\n    ResponseModel responseModel;\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      Map map = apiResponse.response.data;\n      String token = map[\"token\"];\n      authRepo.saveUserToken(token);\n      await authRepo.updateToken();\n      responseModel = ResponseModel(true, 'successful');\n    } else {\n      String errorMessage;\n      if (apiResponse.error is String) {\n        errorMessage = apiResponse.error.toString();\n      } else {\n        errorMessage = apiResponse.error.errors[0].message;\n      }\n      print(errorMessage);\n      _loginErrorMessage = errorMessage;\n      responseModel = ResponseModel(false, errorMessage);\n    }\n    _isLoading = false;\n    notifyListeners();\n    return responseModel;\n  }\n\n  // for forgot password\n  bool _isForgotPasswordLoading = false;\n\n  bool get isForgotPasswordLoading => _isForgotPasswordLoading;\n\n  Future<ResponseModel> forgetPassword(String email) async {\n    _isForgotPasswordLoading = true;\n    notifyListeners();\n    ApiResponse apiResponse = await authRepo.forgetPassword(email);\n    _isForgotPasswordLoading = false;\n    notifyListeners();\n    ResponseModel responseModel;\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      responseModel = ResponseModel(true, apiResponse.response.data[\"message\"]);\n    } else {\n      String errorMessage;\n      if (apiResponse.error is String) {\n        print(apiResponse.error.toString());\n        errorMessage = apiResponse.error.toString();\n      } else {\n        ErrorResponse errorResponse = apiResponse.error;\n        print(errorResponse.errors[0].message);\n        errorMessage = errorResponse.errors[0].message;\n      }\n      responseModel = ResponseModel(false, errorMessage);\n    }\n    return responseModel;\n  }\n\n  Future<ResponseModel> resetPassword(\n      String resetToken, String password, String confirmPassword) async {\n    _isForgotPasswordLoading = true;\n    notifyListeners();\n    ApiResponse apiResponse =\n        await authRepo.resetPassword(resetToken, password, confirmPassword);\n    _isForgotPasswordLoading = false;\n    notifyListeners();\n    ResponseModel responseModel;\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      responseModel = ResponseModel(true, apiResponse.response.data[\"message\"]);\n    } else {\n      String errorMessage;\n      if (apiResponse.error is String) {\n        print(apiResponse.error.toString());\n        errorMessage = apiResponse.error.toString();\n      } else {\n        ErrorResponse errorResponse = apiResponse.error;\n        print(errorResponse.errors[0].message);\n        errorMessage = errorResponse.errors[0].message;\n      }\n      responseModel = ResponseModel(false, errorMessage);\n    }\n    return responseModel;\n  }\n\n  Future<void> updateToken() async {\n    ApiResponse apiResponse = await authRepo.updateToken();\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n    } else {\n      String errorMessage;\n      if (apiResponse.error is String) {\n        errorMessage = apiResponse.error.toString();\n      } else {\n        errorMessage = apiResponse.error.errors[0].message;\n      }\n      print(errorMessage);\n    }\n  }\n\n  // for phone verification\n  bool _isPhoneNumberVerificationButtonLoading = false;\n\n  bool get isPhoneNumberVerificationButtonLoading =>\n      _isPhoneNumberVerificationButtonLoading;\n  String _verificationMsg = '';\n\n  String get verificationMessage => _verificationMsg;\n  String _email = '';\n\n  String get email => _email;\n\n  updateEmail(String email) {\n    _email = email;\n    notifyListeners();\n  }\n\n  Future<ResponseModel> checkEmail(String email) async {\n    _isPhoneNumberVerificationButtonLoading = true;\n    _verificationMsg = '';\n    notifyListeners();\n    ApiResponse apiResponse = await authRepo.checkEmail(email);\n    _isPhoneNumberVerificationButtonLoading = false;\n    notifyListeners();\n    ResponseModel responseModel;\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      responseModel = ResponseModel(true, apiResponse.response.data[\"token\"]);\n    } else {\n      String errorMessage;\n      if (apiResponse.error is String) {\n        print(apiResponse.error.toString());\n        errorMessage = apiResponse.error.toString();\n      } else {\n        ErrorResponse errorResponse = apiResponse.error;\n        print(errorResponse.errors[0].message);\n        errorMessage = errorResponse.errors[0].message;\n      }\n      responseModel = ResponseModel(false, errorMessage);\n      _verificationMsg = errorMessage;\n    }\n    notifyListeners();\n    return responseModel;\n  }\n\n  Future<ResponseModel> verifyToken(String email) async {\n    _isPhoneNumberVerificationButtonLoading = true;\n    notifyListeners();\n    ApiResponse apiResponse =\n        await authRepo.verifyToken(email, _verificationCode);\n    _isPhoneNumberVerificationButtonLoading = false;\n    notifyListeners();\n    ResponseModel responseModel;\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      responseModel = ResponseModel(true, apiResponse.response.data[\"message\"]);\n    } else {\n      String errorMessage;\n      if (apiResponse.error is String) {\n        print(apiResponse.error.toString());\n        errorMessage = apiResponse.error.toString();\n      } else {\n        ErrorResponse errorResponse = apiResponse.error;\n        print(errorResponse.errors[0].message);\n        errorMessage = errorResponse.errors[0].message;\n      }\n      responseModel = ResponseModel(false, errorMessage);\n    }\n    return responseModel;\n  }\n\n  Future<ResponseModel> verifyEmail(String email) async {\n    _isPhoneNumberVerificationButtonLoading = true;\n    _verificationMsg = '';\n    notifyListeners();\n    ApiResponse apiResponse =\n        await authRepo.verifyEmail(email, _verificationCode);\n    _isPhoneNumberVerificationButtonLoading = false;\n    notifyListeners();\n    ResponseModel responseModel;\n    if (apiResponse.response != null &&\n        apiResponse.response.statusCode == 200) {\n      responseModel = ResponseModel(true, apiResponse.response.data[\"message\"]);\n    } else {\n      String errorMessage;\n      if (apiResponse.error is String) {\n        print(apiResponse.error.toString());\n        errorMessage = apiResponse.error.toString();\n      } else {\n        ErrorResponse errorResponse = apiResponse.error;\n        print(errorResponse.errors[0].message);\n        errorMessage = errorResponse.errors[0].message;\n      }\n      responseModel = ResponseModel(false, errorMessage);\n      _verificationMsg = errorMessage;\n    }\n    notifyListeners();\n    return responseModel;\n  }\n\n  // for verification Code\n  String _verificationCode = '';\n\n  String get verificationCode => _verificationCode;\n  bool _isEnableVerificationCode = false;\n\n  bool get isEnableVerificationCode => _isEnableVerificationCode;\n\n  updateVerificationCode(String query) {\n    if (query.length == 4) {\n      _isEnableVerificationCode = true;\n    } else {\n      _isEnableVerificationCode = false;\n    }\n    _verificationCode = query;\n    notifyListeners();\n  }\n\n  // for Remember Me Section\n\n  bool _isActiveRememberMe = false;\n\n  bool get isActiveRememberMe => _isActiveRememberMe;\n\n  toggleRememberMe() {\n    _isActiveRememberMe = !_isActiveRememberMe;\n    notifyListeners();\n  }\n\n  clearRememberMe() {\n    _isActiveRememberMe = false;\n    notifyListeners();\n  }\n\n  bool isLoggedIn() {\n    return authRepo.isLoggedIn();\n  }\n\n  Future<bool> clearSharedData() async {\n    return await authRepo.clearSharedData();\n  }\n\n  void saveUserNumberAndPassword(String number, String password) async {\n    await authRepo.saveUserNumberAndPassword(number, password);\n  }\n\n  String getUserNumber() {\n    return authRepo.getUserNumber() ?? \"\";\n  }\n\n  String getUserPassword() {\n    return authRepo.getUserPassword() ?? \"\";\n  }\n\n  Future<bool> clearUserNumberAndPassword() async {\n    return authRepo.clearUserNumberAndPassword();\n  }\n\n  String getUserToken() {\n    return authRepo.getUserToken();\n  }\n}\n"
        }
    ]
}