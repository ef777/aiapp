{
    "sourceFile": "lib/data/datasource/remote/dio/dio_client.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1667569434860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1667569434860,
            "name": "Commit-0",
            "content": "import 'dart:io';\n\nimport 'package:ainsighter/data/datasource/remote/dio/logging_interceptor.dart';\nimport 'package:ainsighter/utill/app_constants.dart';\nimport 'package:dio/dio.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n\nclass DioClient {\n  final String baseUrl;\n  final LoggingInterceptor loggingInterceptor;\n  final SharedPreferences sharedPreferences;\n\n  Dio dio = Dio();\n  String token = '';\n\n  DioClient(\n    this.baseUrl,\n    Dio dioC, {\n    this.loggingInterceptor,\n    this.sharedPreferences,\n  }) {\n    token = sharedPreferences.getString(AppConstants.TOKEN);\n    print(token);\n    dio = dioC ?? Dio();\n    dio\n      ..options.baseUrl = baseUrl\n      ..options.connectTimeout = 30000\n      ..options.receiveTimeout = 30000\n      ..httpClientAdapter\n      ..options.headers = {\n        'Content-Type': 'application/json; charset=UTF-8',\n        // 'Authorization':\n        //     'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIzIiwianRpIjoiNzRhZjkyZjllOWYxYzBmYjg1NmM4OWViNDJmZGIwMDZhOWRkMWIyYzQyNjE3MWE5ZGQwMmY4NWVmN2E4OGEzZWI5Y2Y4OGNlZmU5YmNlZDUiLCJpYXQiOjE2MzMxMDM0ODcuNTY5MTg0MDY0ODY1MTEyMzA0Njg3NSwibmJmIjoxNjMzMTAzNDg3LjU2OTE4OTA3MTY1NTI3MzQzNzUsImV4cCI6MTY2NDYzOTQ4Ny41NjMyNjg4OTk5MTc2MDI1MzkwNjI1LCJzdWIiOiIxNSIsInNjb3BlcyI6W119.cM4nvE1F0wQFqfjJwq-xQokNVug9HvKiwHz8y_LnrfsRcR1Y0QsLvHX60EwmHWed1z22jgEV3QvEAZr1m-ge5kf5ZikGC-Kt6lQem1oWdP-7rldo9hn5IBbFAq2xAFu84PO8oHMdJz-KKkSCoFUMDVYiI-uKd2ZWMuAVt3oGHragRBU8Be39PYG3IxtM1BWsoUd0o4BEYFW7l0gLlfvi-7xwQTcgoYaC9lA71DEmpBMqFuRpPeXC1xqh-bU3IRAvQkxzExORHlidlv1_xtzBvwnf-pO-5irc9NDBHACmbdqrH_c86WknDUFtiJaqN_-hvIGTu8_9CfuOGFtFcABsOPRnTrTSYCg19Zt1K9-0-QBUlIFpZIlEk7G-92Mzt8FJCd7v1fV9xXM4WQMhOk4kgPXY0t6pLekOA9x105c3imlwEEXPrJMEo5NHc5KJ_QFVFjUiOJD-igfdRy3T8bdeLMnh1ms5d9KGfwTkaviFsjurLNlbCQmyts4hj_HY-33J819JtARfEhX3LcvbEJf2y3KzvInnhzuiAPvnSWSWqgY3JsXx7iyHXaxaCOboKePigUVSjnlJbg3FaPq-ogo6ea4BDMhSv7alStb_KLbhZzqAwVls328InkLr3z6xdiXN8mfkKFQBZDRLhC_oUaXX93pZ3vMLom1W5QQcgD3o038'\n        'Authorization': 'Bearer $token'\n      };\n    dio.interceptors.add(loggingInterceptor);\n  }\n\n  Future<Response> get(\n    String uri, {\n    Map<String, dynamic> queryParameters,\n    Options options,\n    CancelToken cancelToken,\n    ProgressCallback onReceiveProgress,\n  }) async {\n    SharedPreferences sp = await SharedPreferences.getInstance();\n\n    String diotoken = sp.getString(AppConstants.TOKEN);\n\n    try {\n      dio = dio\n        ..options.headers = {\n          'Content-Type': 'application/json; charset=UTF-8',\n          'Authorization': 'Bearer $diotoken'\n        };\n      var response = await dio.get(\n        uri,\n        queryParameters: queryParameters,\n        options: options,\n        cancelToken: cancelToken,\n        onReceiveProgress: onReceiveProgress,\n      );\n      return response;\n    } on SocketException catch (e) {\n      throw SocketException(e.toString());\n    } on FormatException catch (_) {\n      throw FormatException(\"Unable to process the data\");\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  Future<Response> post(\n    String uri, {\n    data,\n    Map<String, dynamic> queryParameters,\n    Options options,\n    CancelToken cancelToken,\n    ProgressCallback onSendProgress,\n    ProgressCallback onReceiveProgress,\n  }) async {\n    try {\n      SharedPreferences sp = await SharedPreferences.getInstance();\n\n      String diotoken = sp.getString(AppConstants.TOKEN);\n\n      dio = dio\n        ..options.headers = {\n          'Content-Type': 'application/json; charset=UTF-8',\n          'Authorization': 'Bearer $diotoken'\n        };\n\n      var response = await dio.post(\n        uri,\n        data: data,\n        queryParameters: queryParameters,\n        options: options,\n        cancelToken: cancelToken,\n        onSendProgress: onSendProgress,\n        onReceiveProgress: onReceiveProgress,\n      );\n      return response;\n    } on FormatException catch (_) {\n      throw FormatException(\"Unable to process the data\");\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  Future<Response> put(\n    String uri, {\n    data,\n    Map<String, dynamic> queryParameters,\n    Options options,\n    CancelToken cancelToken,\n    ProgressCallback onSendProgress,\n    ProgressCallback onReceiveProgress,\n  }) async {\n    SharedPreferences sp = await SharedPreferences.getInstance();\n\n    String diotoken = sp.getString(AppConstants.TOKEN);\n\n    dio = dio\n      ..options.headers = {\n        'Content-Type': 'application/json; charset=UTF-8',\n        'Authorization': 'Bearer $diotoken'\n      };\n\n    try {\n      var response = await dio.put(\n        uri,\n        data: data,\n        queryParameters: queryParameters,\n        options: options,\n        cancelToken: cancelToken,\n        onSendProgress: onSendProgress,\n        onReceiveProgress: onReceiveProgress,\n      );\n      return response;\n    } on FormatException catch (_) {\n      throw FormatException(\"Unable to process the data\");\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  Future<Response> delete(\n    String uri, {\n    data,\n    Map<String, dynamic> queryParameters,\n    Options options,\n    CancelToken cancelToken,\n  }) async {\n    SharedPreferences sp = await SharedPreferences.getInstance();\n\n    String diotoken = sp.getString(AppConstants.TOKEN);\n\n    dio = dio\n      ..options.headers = {\n        'Content-Type': 'application/json; charset=UTF-8',\n        'Authorization': 'Bearer $diotoken'\n      };\n\n    try {\n      var response = await dio.delete(\n        uri,\n        data: data,\n        queryParameters: queryParameters,\n        options: options,\n        cancelToken: cancelToken,\n      );\n      return response;\n    } on FormatException catch (_) {\n      throw FormatException(\"Unable to process the data\");\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n"
        }
    ]
}