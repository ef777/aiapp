{
    "sourceFile": "lib/data/repository/auth_repo.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1667569434860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1667569434860,
            "name": "Commit-0",
            "content": "import 'dart:async';\n\nimport 'package:ainsighter/data/datasource/remote/dio/dio_client.dart';\nimport 'package:ainsighter/data/datasource/remote/exception/api_error_handler.dart';\nimport 'package:ainsighter/data/model/response/base/api_response.dart';\nimport 'package:ainsighter/data/model/response/signup_model.dart';\nimport 'package:ainsighter/utill/app_constants.dart';\nimport 'package:dio/dio.dart';\n// import 'package:firebase_messaging/firebase_messaging.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/foundation.dart' show kIsWeb;\nimport 'package:shared_preferences/shared_preferences.dart';\n\nclass AuthRepo {\n  final DioClient dioClient;\n  final SharedPreferences sharedPreferences;\n\n  AuthRepo({@required this.dioClient, @required this.sharedPreferences});\n\n  Future<ApiResponse> registration(SignUpModel signUpModel) async {\n    try {\n      Response response = await dioClient.post(\n        AppConstants.REGISTER_URI,\n        data: signUpModel.toJson(),\n      );\n      return ApiResponse.withSuccess(response);\n    } catch (e) {\n      return ApiResponse.withError(ApiErrorHandler.getMessage(e));\n    }\n  }\n\n  Future<ApiResponse> login({String email, String password}) async {\n    try {\n      Response response = await dioClient.post(\n        AppConstants.LOGIN_URI,\n        data: {\"email\": email, \"password\": password},\n      );\n      return ApiResponse.withSuccess(response);\n    } catch (e) {\n      return ApiResponse.withError(ApiErrorHandler.getMessage(e));\n    }\n  }\n\n  // for forgot password\n  Future<ApiResponse> forgetPassword(String email) async {\n    try {\n      Response response = await dioClient\n          .post(AppConstants.FORGET_PASSWORD_URI, data: {\"email\": email});\n      return ApiResponse.withSuccess(response);\n    } catch (e) {\n      return ApiResponse.withError(ApiErrorHandler.getMessage(e));\n    }\n  }\n\n  Future<ApiResponse> resetPassword(\n      String resetToken, String password, String confirmPassword) async {\n    try {\n      Response response = await dioClient.post(\n        AppConstants.RESET_PASSWORD_URI,\n        data: {\n          \"_method\": \"put\",\n          \"reset_token\": resetToken,\n          \"password\": password,\n          \"confirm_password\": confirmPassword\n        },\n      );\n      return ApiResponse.withSuccess(response);\n    } catch (e) {\n      return ApiResponse.withError(ApiErrorHandler.getMessage(e));\n    }\n  }\n\n  // for verify phone number\n  Future<ApiResponse> checkEmail(String email) async {\n    try {\n      Response response = await dioClient\n          .post(AppConstants.CHECK_EMAIL_URI, data: {\"email\": email});\n      return ApiResponse.withSuccess(response);\n    } catch (e) {\n      return ApiResponse.withError(ApiErrorHandler.getMessage(e));\n    }\n  }\n\n  Future<ApiResponse> verifyEmail(String email, String token) async {\n    try {\n      Response response = await dioClient.post(AppConstants.VERIFY_EMAIL_URI,\n          data: {\"email\": email, \"token\": token});\n      return ApiResponse.withSuccess(response);\n    } catch (e) {\n      return ApiResponse.withError(ApiErrorHandler.getMessage(e));\n    }\n  }\n\n  Future<ApiResponse> verifyToken(String email, String token) async {\n    try {\n      Response response = await dioClient.post(AppConstants.VERIFY_TOKEN_URI,\n          data: {\"email\": email, \"reset_token\": token});\n      return ApiResponse.withSuccess(response);\n    } catch (e) {\n      return ApiResponse.withError(ApiErrorHandler.getMessage(e));\n    }\n  }\n\n  // for  user token\n  Future<void> saveUserToken(String token) async {\n    dioClient.token = token;\n    dioClient.dio.options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n      'Authorization': 'Bearer $token'\n    };\n\n    try {\n      await sharedPreferences.setString(AppConstants.TOKEN, token);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  Future<ApiResponse> updateToken() async {\n    try {\n      String _deviceToken;\n      _deviceToken = await _saveDeviceToken();\n      // if(Platform.isAndroid || Platform.isIOS) {\n      //   FirebaseMessaging.instance.subscribeToTopic(AppConstants.TOPIC);\n      // }\n      Response response = await dioClient.post(\n        AppConstants.TOKEN_URI,\n        data: {\"_method\": \"put\", \"cm_firebase_token\": _deviceToken},\n      );\n      return ApiResponse.withSuccess(response);\n    } catch (e) {\n      return ApiResponse.withError(ApiErrorHandler.getMessage(e));\n    }\n  }\n\n  Future<String> _saveDeviceToken() async {\n    String _deviceToken = '';\n    // String _deviceToken = await FirebaseMessaging.instance.getToken();\n    if (_deviceToken != null) {\n      print('--------Device Token---------- ' + _deviceToken);\n    }\n    return _deviceToken;\n  }\n\n  String getUserToken() {\n    return sharedPreferences.getString(AppConstants.TOKEN) ?? \"\";\n  }\n\n  bool isLoggedIn() {\n    return sharedPreferences.containsKey(AppConstants.TOKEN);\n  }\n\n  Future<bool> clearSharedData() async {\n    if (!kIsWeb) {\n      // await FirebaseMessaging.instance.unsubscribeFromTopic(AppConstants.TOPIC);\n    }\n    await sharedPreferences.remove(AppConstants.TOKEN);\n    await sharedPreferences.remove(AppConstants.CART_LIST);\n    await sharedPreferences.remove(AppConstants.USER_ADDRESS);\n    await sharedPreferences.remove(AppConstants.SEARCH_ADDRESS);\n    return true;\n  }\n\n  // for  Remember Email\n  Future<void> saveUserNumberAndPassword(String number, String password) async {\n    try {\n      await sharedPreferences.setString(AppConstants.USER_PASSWORD, password);\n      await sharedPreferences.setString(AppConstants.USER_NUMBER, number);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  String getUserNumber() {\n    return sharedPreferences.getString(AppConstants.USER_NUMBER) ?? \"\";\n  }\n\n  String getUserPassword() {\n    return sharedPreferences.getString(AppConstants.USER_PASSWORD) ?? \"\";\n  }\n\n  Future<bool> clearUserNumberAndPassword() async {\n    await sharedPreferences.remove(AppConstants.USER_PASSWORD);\n    return await sharedPreferences.remove(AppConstants.USER_NUMBER);\n  }\n}\n"
        }
    ]
}